package ctsync;
 
import java.io.File;  
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import java.nio.file.FileSystems;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.WatchEvent;
import java.nio.file.WatchKey;
import java.nio.file.WatchService;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.zip.Deflater;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

import com.sun.nio.file.ExtendedWatchEventModifier;
import com.sun.nio.file.SensitivityWatchEventModifier;

import static java.nio.file.LinkOption.NOFOLLOW_LINKS;
import static java.nio.file.StandardWatchEventKinds.*;
import static java.nio.file.StandardCopyOption.*;


/*
 * Cloudturbine file sync
 * basic logic:
 * WatchService recursively registers and catches file update events
 * (some logic to avoid dupes)
 * Files to copy added to linked-list (fileQ)
 * PumpQ async thread chews on fileQ and copies to Stream folder
 */
//------------------------------------------------------------------------------------------------
/**
 * Example to watch a directory (or tree) for changes to files.
 */
 
public class CTsync {
 
    private final WatchService watcher;
    private final Map<WatchKey,Path> keys;
    private LinkedList<String> fileQ=new LinkedList<String>();
    	
    private static boolean recursive;
	private static boolean debug = false;
//	private static String modeflag="c";				// c-copy, z-zip, u-unzip
	private static boolean zipflag=false;
	private static boolean unzipflag = false;
	private static boolean copyflag = false;
	private static boolean delflag = false;
	
	private static int mgranularity=100;			// msec file timestamp granularity (limits number of time-folders)
//	private static int mcheckinterval=100;			// msec check for new files interval 
	private static int mflushinterval=1000;			// rate at which to flush zip files (limits Dropbox update rate)
	private static long mpacetime=0;

	private static String tempPath=".";				// was "Temp"
	private static String destPath="Stream";
	private static String srcPath="CV";
	
    private static ZipOutputStream zos = null;
    private static String dstName, tmpName;
    private static String outName=null;
    
	//------------------------------------------------------------------------------------------------
    /**
     * Creates a WatchService and registers the given directory
     */
    public CTsync() throws IOException {
        this.watcher = FileSystems.getDefault().newWatchService();
        this.keys = new HashMap<WatchKey,Path>();
 
		if(zipflag) {
			new File(tempPath).mkdirs();			// make sure Temp folder exists
			startZflush(mflushinterval);			// flush zip files at interval
	        System.err.println("Zflush started.");
		}
		else {
			new PumpQ().start();				// start the async file queue monitor
	        System.err.println("PumpQ started.");
		}
        
        if (recursive) {
            System.out.format("Scanning %s ...\n", srcPath);
            registerAll(Paths.get(srcPath));
        } else {
            register(Paths.get(srcPath));
        }
    }
 
	//------------------------------------------------------------------------------------------------
    //  private static String rootPath="";
    public static void main(String[] args) throws IOException {
    	// parse arguments
    	if (args.length == 0) usage();
    	int dirArg = 0;
    	while(args[dirArg].startsWith("-")) {		// clugey arg parsing
    		if(args[dirArg].equals("-r")) 	recursive = true;
    		if(args[dirArg].equals("-z")) 	zipflag = true;
    		if(args[dirArg].equals("-u")) 	unzipflag = true;
    		if(args[dirArg].equals("-c")) 	copyflag = true;
    		if(args[dirArg].equals("-x")) 	debug = true;
    		if(args[dirArg].equals("-d")) 	delflag = true;
    		if(args[dirArg].equals("-t")) { mpacetime = Long.parseLong(args[++dirArg]); }
    		if(args[dirArg].equals("-n")) { outName = args[++dirArg] ; }
    		dirArg++;
    	}
    	if(!zipflag && !unzipflag) copyflag = true;		// do something
    	
    	if(debug) System.err.println("debug on");
    	// register directory and process its events
    	if(args.length > dirArg) srcPath = args[dirArg++];
    	if(args.length > dirArg) destPath = args[dirArg++];
    	if(args.length > dirArg) mflushinterval = Integer.parseInt(args[dirArg]);
    	if(mflushinterval < 10)  mflushinterval = 10;		// no busy loop allowed
    	
    	System.err.println("CTsync running...");
    	new CTsync().watchEvents();
    }

    //------------------------------------------------------------------------------------------------
    static void usage() {
    	System.err.println("Usage: java -jar CTsync.jar [-r -c -z -u -x -d -t<paceTime> -n<outName>] CVdir StreamDir [mflush default: "+mflushinterval+"]");
    	System.exit(-1);
    }

	//------------------------------------------------------------------------------------------------
	// PumpQ:  async writes files stored in queue (linked list) 
	
    class PumpQ extends Thread {
    	PumpQ() {};
    	
        public void run() {
            while(true) {
            	if(PumpFile() <= 0) { try{ Thread.sleep(mflushinterval); } catch(Exception e){} } 	// maybe on a timer...
            }
        }
    }
    
//------------------------------------------------------------------------------------------------
// unzip:  unzip archive of files
    
    void unzip(String zipFile, Path dest) {
    	if(debug) System.err.println("unzip: "+zipFile+" to: "+dest);
    	byte[] buffer = new byte[1024];
    	
    	String zipName = new File(zipFile).getName();
    	String outputFolder = dest + File.separator + zipName.replace(".zip",  "");
    	try{
    		//get the zip file content
    		ZipInputStream zis = new ZipInputStream(new FileInputStream(zipFile));
    		ZipEntry ze = zis.getNextEntry();			//get the zipped file list entry
    		
    		while(ze!=null){
    			String fileName = ze.getName();
    			Path pp = Paths.get(fileName);
    			File newFile = new File(outputFolder + File.separator + pp);
    			System.err.println("unzip --> "+ newFile.getAbsoluteFile());
    			
    			new File(newFile.getParent()).mkdirs();			// create folders
    			FileOutputStream fos = new FileOutputStream(newFile);             

    			int len;
    			while ((len = zis.read(buffer)) > 0) fos.write(buffer, 0, len);

    			fos.close();   
    			ze = zis.getNextEntry();
    		}

    		zis.closeEntry();
    		zis.close();
    	} catch(IOException ex) { ex.printStackTrace(); }
    }    
    
//------------------------------------------------------------------------------------------------
// zip:  zip-archive list of files
    
    private String zosdone="false";
    synchronized void zip(long ziptime, ArrayList<File>files) throws IOException {
    	if(files.size() <= 0) return;		// notta
    	tmpName = tempPath + File.separator + "CTzip.tmp";			// use fixed name for temporary staging 
    	
        try {
    		if(zos == null) {    			
//    	    	dstName = destPath + File.separator + ziptime  + ".zip";
    			long mtime0 = (files.get(0).lastModified() / mgranularity) * mgranularity;
    	    	dstName = destPath + File.separator + mtime0  + ".zip";
    	    	zosdone = "false";
    			zos = new ZipOutputStream(new FileOutputStream(new File(tmpName)));
    		}
    		zos.setLevel(Deflater.BEST_SPEED);			// DEFAULT_COMPRESSION, NO_COMPRESSION, BEST_SPEED
    		
    		long mtime=0;
//    		if(mpacetime>0) mtime = System.currentTimeMillis();
    		if(mpacetime>0) mtime = ziptime;

        	for(int i=0; i<files.size(); i++) {
        		File file = files.get(i);
        		
        		if(mpacetime>0 && i>0) mtime += mpacetime;
        		else {
        			mtime = file.lastModified();	
        			mtime = (mtime / mgranularity) * mgranularity;			//  set granularity
        		}
        		
        		String name;
        		if(outName != null) name = mtime+"/"+outName;			// single name output
        		else				name = mtime+"/"+file.getName();	// forward slash as internal zip-file separator		
        		
    	    	if(debug) System.err.println("Zip: "+name+" to: "+tmpName+" enroute to: "+dstName);

        		ZipEntry entry = new ZipEntry(name);
        		try {
        			zos.putNextEntry(entry);
        		} catch(IOException e) {
//        			if(debug) System.err.println("duplicate zip entry (ignored): "+name);
        			continue;
        		}
        		FileInputStream fis = null;
        		try {
        			fis = new FileInputStream(files.get(i));
        			byte[] byteBuffer = new byte[4096];
        			int bytesRead = -1;
        			while ((bytesRead = fis.read(byteBuffer)) != -1) {
        				zos.write(byteBuffer, 0, bytesRead);
        			}
        			zos.flush();
        			if(delflag) {
        				try {
//        					if(debug) System.err.println("delete file: "+files.get(i).toPath());
        					Files.delete(files.get(i).toPath());
        				} catch(Exception e) {
        					System.err.println("File delete failed: "+e);
        				}
        			}
        		} finally {
        			try {
        				fis.close();
        			} catch (Exception e) {
        			}
        		}
        		zos.closeEntry();
        		zos.flush();
        	}
        } finally {
          try {
        	  synchronized(zosdone) { zosdone.notifyAll(); }
        	  zosdone="true";
//            zos.close();
          } catch (Exception e) {
          }
        }
      }
  
	//------------------------------------------------------------------------------------------------
    public void startZflush(long msec) {
        Timer timer = new Timer();
        timer.scheduleAtFixedRate(new ZflushTask(), msec, msec);
        if(debug) System.err.println("started zflush timer at: "+msec+" msec");
//        timer.schedule(new ZflushTask(), msec);
	}

    class ZflushTask extends TimerTask {
        public synchronized void run() {
        	try {
        		PumpFile();							// process files in Linked-List Queue
        		if(zos == null) return;
        		if(zosdone.equals("false")) {
        			if(debug) System.err.println("zflush waiting...");
        			synchronized(zosdone) { zosdone.wait(); }
        		}
        		if(zos != null) {
        			if(debug) System.err.println("FLUSH zip: "+tmpName+" --> "+dstName);
        			zos.close();
                	zos = null;
                	zosdone="false";
        			Files.move(Paths.get(tmpName), Paths.get(dstName));		// move temp file to final
        		}
        	} catch(Exception e) { System.err.println("zflush move failed"); e.printStackTrace(); };
        }
    }
    
	//------------------------------------------------------------------------------------------------
    /**
     * Register the given directory with the WatchService
     */
    private void register(Path dir) throws IOException {
//        WatchKey key = dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);
    	// following works better on Mac OS X, which as of Java7 does not use native watchservice.  OS X still slow relative to PC.  See:
    	WatchKey key;
    	// http://stackoverflow.com/questions/9588737/is-java-7-watchservice-slow-for-anyone-else
    	try {		// Windows (only) supports built-in recursive monitoring
    		key = dir.register(watcher, new WatchEvent.Kind[]{ENTRY_MODIFY, ENTRY_CREATE, ENTRY_DELETE}, SensitivityWatchEventModifier.HIGH, ExtendedWatchEventModifier.FILE_TREE);
    	} catch(Exception e) {
    		key = dir.register(watcher, new WatchEvent.Kind[]{ENTRY_MODIFY, ENTRY_CREATE, ENTRY_DELETE}, SensitivityWatchEventModifier.HIGH);
    	}
    	
        keys.put(key, dir);
    }
 
	//------------------------------------------------------------------------------------------------
    /**
     * Register the given directory, and all its sub-directories, with the
     * WatchService.
     */
    private void registerAll(final Path start) throws IOException {
        // register directory and sub-directories
        Files.walkFileTree(start, new SimpleFileVisitor<Path>() {
            @Override
            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)
                throws IOException
            {
                register(dir);
                return FileVisitResult.CONTINUE;
            }
        });
    }
 
	//------------------------------------------------------------------------------------------------
    /**
     * Process all events for keys queued to the watcher
     */
    void watchEvents() {
        FileTime lastMod=null;
        Path lastFile=null;
        for (;;) {
 
            // wait for key to be signalled
            WatchKey key;
            try {
                key = watcher.take();		// wait on next watch key (file change)  // was watcher.take()
            } 
            catch (Exception x) {
            	System.err.println("watcher interupted!");
               return;
           }
 
            Path dir = keys.get(key);
            if (dir == null) {
                System.err.println("WatchKey not recognized!!");
                continue;
            }

            for (WatchEvent<?> event: key.pollEvents()) {
                WatchEvent.Kind kind = event.kind();
//                System.err.println("watch kind: "+kind);
                
                // TBD - provide example of how OVERFLOW event is handled
                if (kind == OVERFLOW) {
                	System.err.println("OVERFLOW!!!");
                    continue;
                }
 
                // Context for directory entry event is the file name of entry
                WatchEvent<Path> ev = cast(event);
                Path name = ev.context();
                Path child = dir.resolve(name);
 
                if(lastMod == null) {	// initialize to first file
                	try {
//                		lastMod = Files.getLastModifiedTime(child);
                	} catch(Exception e){};
                }
                
                // print out event
                if(debug) System.out.format("%s: %s\n", event.kind().name(), child);
 
                // make a rule when to send new file to CloudTurbine
               
                if(kind == ENTRY_MODIFY || kind == ENTRY_CREATE) {
                	if(Files.isRegularFile(child) && Files.isReadable(child) && Files.exists(child)) {
//                		System.out.println("******got one: "+child);
                		boolean isSame = false;
                		try {	// skip duplicate mod-times 
                				// can get multiple modify events per file (over)write
                			FileTime thisMod = Files.getLastModifiedTime(child);
//                			isSame = thisMod.equals(lastMod);

//                			long delta = 1000;
                			if(child.equals(lastFile) && (thisMod.equals(lastMod)))
//                			if(thisMod.toMillis() < (lastMod.toMillis()+delta))	// try time-delta diff
                						isSame = true;
                			else 		isSame = false;
                			
                			lastMod = thisMod;
                			lastFile = child;
 //               			isSame = false;			// foo over-ride to see if files all go
                		} catch(Exception e){};
                		if(!isSame) {
                			putFile(child);
                		}
                	}
                }
                
                // if directory is created, and watching recursively, then register it and its sub-directories
                // this can miss quick create folder/file...
                if (recursive && (kind == ENTRY_CREATE)) {
                	if(debug) System.err.println("register folder: "+child);
                    try {
                        if (Files.isDirectory(child, NOFOLLOW_LINKS)) {
//                        if (Files.isDirectory(child)) {
                            registerAll(child);
                            //  see if any quick create files already there (watcher may miss):
                            File folder = child.toFile();
                            File[] listOfFiles = folder.listFiles();
                            for(int i=0; i<listOfFiles.length; i++) {
                            	if(debug) System.err.println("new folder, found file: "+listOfFiles[i]);
                            	putFile(listOfFiles[i].toPath());
                            }
                        }
                    } catch (IOException x) {
                    	System.err.println("exception on dir create: "+x);
                        // ignore to keep sample readbale
                    }
                }
            }
 
            // reset key and remove from set if directory no longer accessible
            boolean valid = key.reset();
            if (!valid) {
                keys.remove(key);
 
                // all directories are inaccessible
                if (keys.isEmpty()) {
                    break;
                }
            }
        }
    }
  
    @SuppressWarnings("unchecked")
    static <T> WatchEvent<T> cast(WatchEvent<?> event) {
        return (WatchEvent<T>)event;
    }
    
	//------------------------------------------------------------------------------------------------
	synchronized private void putFile(Path child) {
		try {
//			putRBNB(child);
			String sname = child.toString();
			if(child==null || sname==null) {
				System.err.println("OOPS:  null putFile! (ignored)");
				return;
			}
			System.err.println("putFile: "+child);
			if(sname != null && !checkDupe(fileQ, sname))	// no dupes (not full proof if PUTs get ahead of create/mod)
				fileQ.add(sname);
		} catch(Exception e) {
			System.err.println("putFile exception: "+e);
			fileQ=new LinkedList<String>();					// make a new one?
			System.err.println("fileQ: "+fileQ);
			e.printStackTrace();
		}
	}
	  
	boolean checkDupe(LinkedList<String> ll, String check) {
		for(String s:ll) {
			if(s.equals(check)) return true;
		}
		return false;
	}

	
	//------------------------------------------------------------------------------------------------
	// PumpFile:  sync writes files stored in queue (linked list) 
	
	public int PumpFile() {
		String nextP;
		String slash = File.separator;
		long omtime = 0;
		zos = null;

		//            while(true) {
		int nfile = fileQ.size();			// number available
		//            	if(nfile > 0) {
		// clump file time as groups
		long mtime = System.currentTimeMillis();
		//        			mtime = (mtime / mgranularity) * mgranularity;	//  set granularity
		String targFolder = null;

		ArrayList<File>files=new ArrayList<File>();
		try {
			for(int i=0; i<nfile; i++) {
				nextP = fileQ.poll();								// nextP is full-path name
				if(nextP == null) {
					System.err.println("PumpFile: null file! nfile: "+nfile);		// shouldn't happen but sporadically does?
					Thread.sleep(60000);		// DEBUG:  slow down so can see event
					nfile=0;					// get out of loop
					//        						fileQ.clear();
					break;
				}
				File nextF = new File(nextP);
				if((nextF==null) || (nextF.length()<=0)) {
					System.err.println("PumpFile: empty file: "+nextF);
					continue;	// skip empty files
				}
				String fname = nextF.getName();						// file name (last part of pathname sequence)
				if(fname.endsWith(".tmp")) continue;	

				//       					if(debug) System.err.println("ctsync file: "+fname+", copyflag: "+copyflag);
				mtime = nextF.lastModified();
				mtime = (mtime / mgranularity) * mgranularity;		//  set granularity

				// UNZIP
				if(unzipflag && fname.endsWith(".zip")) unzip(nextP, Paths.get(destPath));			// unzip

				// ZIP
				else if(zipflag && !fname.endsWith(".zip")) files.add(nextF);		// build list of files for composite zip

				// COPY
				else if(copyflag){									// copy updated file to Stream sub-folder
					targFolder = destPath+slash+mtime+slash;
					new File(targFolder).mkdirs();		// ensure destination dir is created
					if(debug) System.err.println("copy: "+nextP+" to: "+(targFolder+fname));
					Files.copy(Paths.get(nextP), Paths.get(targFolder+fname), REPLACE_EXISTING, COPY_ATTRIBUTES);
				}
			}
			fileQ=new LinkedList<String>();			// start over?

			// ZIP
			if(zipflag && (files.size()>0)) {				// zip collection of files 
				if(mtime == omtime) mtime++;							// no-clobber 
				zip(mtime, files);
				omtime = mtime;
			}
		} catch(Exception e) { System.err.println("oops: "+e); e.printStackTrace(); nfile=0; }

		return nfile;
	}

}
